;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;MEMTEST.A65 -- Memory Tester for the Rockwell AIM-65
;
;This program is intended to be burned into an EPROM and
;installed in socket Z22 (0xF000), and tests the following:
;
; * ROM checksum
; * Stack page quick write test
; * Zero page quick write test
; * RIOT single-pass memory test
; * Exhaustive test of remaining system RAM
;
;See README.md for a more detailed explanation of the tests,
;how to build from source, etc.
;
;(c) 2022 Glitch Works, LLC
;http://www.glitchwrks.com/
;
;Released under the GNU GPL v3, see LICENSE in project root.
;
;The majority of initial programming and testing were done
;for Glitch Works, LLC by TangentDelta:
;
;   https://github.com/tangentdelta
;
;Exhaustive memory test based heavily on the routines from
;the OSI MEMORY TEST from OS-65D 2.0, published in OSI
;Small Systems Journal, Volume 1, Number 3, September 1977.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;MEMBEG -- Starting Address for Memory Autosize
;
;This value can be set higher to preserve the contents of
;memory at lower addresses.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEMBEG	=	$200		;Default to 0x0200, above stack

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Miscellaneous AIM-65 Equates
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RIOTBAS	=	$A400		;Start of the 6530 RIOT
RIOTEND	=	RIOTBAS+$80	;End of RIOT RAM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;AIM-65 ASCII Display Equates
;
;The AIM-65's ASCII displays are interfaced through a PIA,
;rather than sitting directly on the 6502's system bus.
;
;Display PIA bit assignments:
;PA0 = A0	Digit select 0
;PA1 = A1	Digit select 1
;PA2 = *CE1	Display 0	111110XX
;PA3 = *CE2	Display 1	111101XX
;PA4 = *CE3	Dispaly 2	111011XX
;PA5 = *CE4	Display 3	110111XX
;PA6 = *CE5	Display 4	101111XX
;PA7 = *W	Write		Data is clocked into display on 
;				rising edge
;
;PB0-PB6 = D0-D6	Data
;PB7 = *CU		Cursor input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PIA	=	$AC00		;Display PIA base address
PIAORA	=	PIA+0		;Port A output register
PIADDA	=	PIA+0		;Port A data direction register
PIACRA	=	PIA+1		;Port A control register
PIAORB	=	PIA+2		;Port B output register
PIADDB	=	PIA+2		;Port B data direction register
PIACRB	=	PIA+3		;Port B control register
CHARMOD	=	$80		;Character output mode OR mask
CURSMOD	=	$7F		;Cursor output mode AND mask
DCEIDLE	=	%11111100	;Display select bits idle state
DISPWR	=	$7F		;Write to display AND mask
NDISPWR	=	$80		;Disable display write OR mask

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Zero Page Variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PASCTR	=	$C5		;Pass Counter
MAXPAS	=	$C6		;Maximum number of memory test passes
VAR1	=	$C7
VAR2	=	$C8
VAR3	=	$C9
MEMPTR	=	$CA
MEMPLO	=	MEMPTR
MEMPHI	=	MEMPTR+1
ENDPTR	=	$CC
ENDPLO	=	ENDPTR
ENDPHI	=	ENDPTR+1
TEMP	=	$CE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PSUMLP -- Page sum macro
;
;pre: X contains 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.macro	PGESUM	ADDR
.local	PSUMLP
PSUMLP:	CLC
	ADC	ADDR,X
	INX
	BNE	PSUMLP
.endmacro

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PGETST -- Page test macro
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.macro	PGETST	ADDR
.local	PTSTW, PTSTR, TSTBAD, END
	LDX	#$00		;Pattern
	LDY	#$00		;Index

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PTSTW -- Page test write loop
;
;pre: X contains starting pattern value
;pre: Y contains 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PTSTW:	TXA
	STA	ADDR,Y
	INX
	INY
	BNE	PTSTW

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PTSTR -- Page test read loop
;
;pre: X contains starting pattern value
;pre: Y contains 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PTSTR:	TXA			;Transfer the pattern to A
	CMP	ADDR,Y		;Compare the pattern to what was written
	BNE	TSTBAD		;If different, return with error
	INX
	INY
	BNE	PTSTR

	INX			;Increment X to the next starting pattern 
				;bitmap
	BNE	PTSTW		;Start the next cycle if pattern is not 0
	
	CLC			;Once the starting pattern returns to 0, the
				;test is done
	BCC	END		;Return with carry clear, indicating a 
				;successful test

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TSTBAD -- Exit routine for failed test cycle
;
;post: CY flag is set to indicate failure
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TSTBAD:	SEC			;Return with carry set, indicating a failed test
END:
.endmacro

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SDELAY -- Simple delay macro
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.macro SDELAY
.local	DLOOP1, DLOOP2
	LDX	#$FF
DLOOP1:	LDY	#$FF

DLOOP2:	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	DEY
	BNE	DLOOP2
	DEX
	BNE	DLOOP1
.endmacro

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SPMSG -- Simple message printer macro
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.macro	SPMSG ADDR
.local	MSPLUP
	LDX	#$00
MSPLUP:	LDA	ADDR,X
	ORA	#$80
	STA	PIAORB
	LDA	DISPCE,X
	STA	PIAORA
	AND	#$7F		;Set ~W low
	STA	PIAORA
	ORA	#$80		;Set ~W high
	STA	PIAORA

	INX
	CPX	#20
	BNE	MSPLUP
.endmacro

.segment "CODE"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;START -- Begin the test
;
;ROM is checksummed before testing.
;
;TODO: change $00 $FF tests to include $AA and $55. Make
;less address dependent.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
START:	SEI
	LDX	#$FF
	TXS

	LDA	#04		;Select output registers A and B
	STA	PIACRA
	STA	PIACRB

	LDA	#DCEIDLE	;Display select bits in idle state
	STA	PIAORA

	LDA	#$80		;Put data bits in idle state
	STA	PIAORB

	LDA	#00
	STA	PIACRA
	STA	PIACRB
	LDA	#$FF
	STA	PIADDA
	STA	PIADDB

	LDA	#04
	STA	PIACRA
	STA	PIACRB


	LDX	#$00		;Clear all of the cursor bits
CURCLP:	LDA	#$00		;D0 = 0, *CU = 0
	STA	PIAORB
	LDA	DISPCE,X	;Get the chip select bits for this character
	STA	PIAORA		;Set the lines
	AND	#$7F		;Set ~W low
	STA	PIAORA
	ORA	#$80		;Set ~W high
	STA	PIAORA

	INX
	CPX	#20
	BNE	CURCLP		;Clear the next cursor position

	LDX	#$00		;Start checksumming ROM, we use a number
	LDA	#$00		;of macro calls to inline this, since we
	PGESUM	$F000		;don't know if we have usable RAM.
	PGESUM	$F100
	PGESUM	$F200
	PGESUM	$F300
	PGESUM	$F400
	PGESUM	$F500
	PGESUM	$F600
	PGESUM	$F700
	PGESUM	$F800
	PGESUM	$F900
	PGESUM	$FA00
	PGESUM	$FB00
	PGESUM	$FC00
	PGESUM	$FD00
	PGESUM	$FE00
	PGESUM	$FF00
	ORA	#$00		;Set the flags for A
	BEQ	ROMGUD		;Checksum passed, continue
	SPMSG	RMFAIL		;ROM fail, use the simple message printer
	BEQ	*		;No HALT, so sit in a loop

ROMGUD:	SPMSG	RMGOOD		;ROM good, use simple message printer
	SDELAY			;Delay so user can read the message

	SPMSG	STTEST		;Display stack test message
	PGETST	$100		;Test stack page using the page test macro
	BCS	STBAD		;Output error message if the stack is bad

	LDX	#$00
STGLUP:	LDA	STGOOD,X	;Stack is good, so we can now use subroutine
	JSR	COUT		;calls. We still haven't tested zero page
	CPX	#20		;though, so we can't use the string
	BNE	STGLUP		;printer.
	JSR	DELAY		;Delay so user can read the message

	SPMSG	ZPTEST		;Display zero page test message
	PGETST	$00		;Test zero page using the page test macro
	BCS	ZPBAD		;Output error message if zero page is bad

	LDA	#<ZPGOOD	;Zero page is good, now we can use variables
	STA	MEMPLO
	LDA	#>ZPGOOD
	STA	MEMPHI
	JSR	PRINT		;Display zero page good message
	JSR	DELAY		;Delay so user can read the message

	JMP	TSRIOT		;Stack and ZP good, test RIOT RAM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ZPBAD -- Handle failed zero page memory
;
;We can't use the usual string printer since zero page
;variable space may have issues.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ZPBAD:	LDX	#$00
ZPBLP:	LDA	ZPFAIL,X	;Get the character to send to the display
	ORA	#$80		;Set the cursor select bit
	STA	PIAORB		;Set the data lines
	LDA	DISPCE,X	;Get the chip select bits for this character
	STA	PIAORA		;Set the lines
	AND	#$7F		;Set ~W low
	STA	PIAORA
	ORA	#$80		;Set ~W high
	STA	PIAORA

	INX
	CPX	#20
	BNE	ZPBLP
	BEQ	*		;No HALT, sit in a loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;STBAD -- Handle failed stack page memory
;
;We use the simple printer macro since we can't make
;subroutine calls.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
STBAD:	SPMSG	STFAIL
	BEQ	*		;No HALT, sit in a loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TSRIOT -- Test the RIOT's RAM
;
;If we get to this point, zero page and stack page have both
;passes the basic memory test. Falls through to main memory
;test.
;
;We don't use the RIOT's RAM for this ROM, but stock AIM-65
;ROMs do.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TSRIOT:	LDA	#<RIOTBAS	;Start address of RIOT RAM
	STA	VAR2
	LDA	#>RIOTBAS
	STA	VAR3
	LDA	#<RIOTEND	;Eend address of RIOT RAM
	STA	ENDPLO
	LDA	#>RIOTEND
	STA	ENDPHI
	LDA	#$01
	STA	MAXPAS		;Only test the RIOT's RAM once
	JSR	MEMTST

	LDA	#<RIOTGD	;Display RIOT RAM good message
	STA	MEMPLO
	LDA	#>RIOTGD
	STA	MEMPHI
	JSR	PRINT
	JSR	DELAY		;Delay so user can read the message

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;FULTST -- Main memory test
;
;This routine sizes main memory and begins testing it
;exhaustively.
;
;pre: MEMBEG is initialized to first address to test
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FULTST:	JSR	MEMSIZ		;Size the memory and write the ending
				;address to ENDPTR
	LDA	#<MEMBEG	;Set up pointer to start of test range
	STA	VAR2
	LDA	#>MEMBEG
	STA	VAR3

	LDA	#$FF		;256 passes, this will take a long time
	STA	MAXPAS
	JSR	MEMTST		;Start the full test

	JMP	FULTST		;Loop the main test


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;MEMTST -- Exhaustive memory test
;
;This memory test is heavily based on the OSI MEMORY TEST
;from OS-65D 2.0, published in the Small Systems Journal,
;Volume 1, Number 3, September 1977.
;
;The test has been modified to work with the display
;limitations of the AIM-65. Status output format is:
;
;   SSSS-EEEE P=XX C=YY
;
;SSSS is the starting address, in hex
;EEEE is the ending address, in hex
;XX is the current pass count (256 cycles == 1 pass)
;YY is the cycle count
;
;Falls through to STRTST.
;
;pre: VAR2, VAR3 contain first address to test
;pre: ENDPTR contains last address to test
;pre: MAXPAS contains the number of passes to do
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEMTST:	JSR	DISCLR		;Clear the display
	LDX	#$00

	LDA	VAR3		;Print the test starting address
	JSR	BYTOUT
	LDA	VAR2
	JSR	BYTOUT

	LDA	#'-'		;Print a separator
	JSR	COUT

	LDA	ENDPLO		;Print the test ending address, decrement
				;it first for clarity
	BNE	MEMTS1		;Leave end pointer high alone if no underflow
	DEC	ENDPHI		;Decrement high byte of address

MEMTS1:	DEC	ENDPLO		;Decrement low byte of address
	LDA	ENDPHI		;Print ending address
	JSR	BYTOUT
	LDA	ENDPLO
	JSR	BYTOUT

	INC	ENDPLO		;Increment the ending address to original value
	BNE	MEMTS2		;Don't increment the high byte if no overflow
	INC	ENDPHI		;Increment the high byte

MEMTS2:	INX			;Increment display pointer to leave space
	LDA	#'P'		;Print pass count label
	JSR	COUT
	LDA	#'='
	JSR	COUT

	LDA	#$00		;Reset pass counter to 0
	STA	PASCTR
	JSR	BYTOUT		;Print pass counter

	INX			;Increment display pointer to leave space
	LDA	#'C'		;Print cycle count label
	JSR	COUT
	LDA	#'='
	JSR	COUT

	LDX	#$00		;X = cycle count
	LDA	#$77		;A = seed for memory test
	STA	VAR1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;STRTST -- Start of the memory test
;
;MEMTST must be run before this routine, it falls through to
;STRTST.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
STRTST:	JSR	RESTRT		;Move starting address into MEMPTR pointer

	TXA			;Output the current pass
	LDX	#17		;Start at character 17
	JSR	BYTOUT
	
	TAX			;Restore the pass number

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TSTWRT -- Write memory test pattern
;
;This routine sets all memory locations from VAR2,VAR3 to
;ENDPTR to the value calculated by GTSVAL.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TSTWRT:	JSR	GTSVAL		;Get a test data value based on the memory 
				;pointer address
	STA	(MEMPTR),Y	;Store it at the address we're testing
	JSR	INMPTR		;Increment the memory pointer
	BNE	TSTWRT		;Loop again if MEMPTR != ENDPTR

	JSR	RESTRT		;Restore START value to MEMPTR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TESTRD -- Read memory test pattern
;
;This routine reads back all memory locations from
;VAR2,VAR3 to ENDPTR and compares them to the calculated
;GTSVAL.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TESTRD:	JSR	GTSVAL		;Get the test data value based on the current 
				;memory pointer
	CMP	(MEMPTR),Y	;Compare it to what was stored in previous loop
	BNE	TSTERR		;If they're different, throw an error
	JSR	INMPTR		;Increment the memory pointer
	BNE	TESTRD		;Loop again if MEMPTR != ENDPTR

	INX			;Increment the number of test passes
	BNE	STRTST		;If we're <256 passes, test again.

	INC	PASCTR		;Increment pass counter and update display
	LDA	PASCTR
	CMP	MAXPAS		;Do we need to stop?
	BEQ	TESTR1		;Stop the test and return
	LDX	#12
	JSR	BYTOUT
	LDX	#$00
	JMP	STRTST		;Start next pass!

TESTR1:	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;TSTERR -- Display test error code on AIM-65 display
;
;This routine displays an error in the format:
;
;   ERROR@XXXX E=YY R=ZZ
;
;XXXX is the address of the failure, in hex
;YY is the expected value for the location, in hex
;ZZ is the value read back from RAM at the location, in hex
;
;VAR3 is used to store A (the expected value), VAR2 is used
;to store the value read back from memory.
;
;pre: A contains the expected memory value
;pre: MEMPTR points to address of failure
;post: failure information is displayed on AIM-65 display
;post: execution stopped with infinite loop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TSTERR:	STA	VAR3		;VAR3 = expected value
	LDA	(MEMPTR),Y	;Get read back value
	STA	VAR2		;VAR2 = actual value read back
	LDA	MEMPLO		;Temporarily store MEMPTR in ENDPTR
	STA	ENDPLO
	LDA	MEMPHI
	STA	ENDPHI

	LDA	#<MEMERR	;Set MEMPTR to error string
	STA	MEMPLO
	LDA	#>MEMERR
	STA	MEMPHI
	JSR	PRINT		;Print it

	LDX	#06		;Output error address
	LDA	ENDPHI		;Print high byte of error address
	JSR	BYTOUT
	LDA	ENDPLO		;Print low byte of error address
	JSR	BYTOUT
	
	LDX	#13		;Print expected value
	LDA	VAR3
	JSR	BYTOUT

	LDX	#18		;Print readback value
	LDA	VAR2
	JSR	BYTOUT

	JMP	*		;No HALT, so sit in a loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;MEMSIZ -- Autosize available RAM
;
;Searches system memory from MEMBEG on to find the end of
;writable RAM. Clobbers contents of memory tested.
;Calculates the amount of memory to test starting from
;
;pre: MEMBEG initialized to start of memory to be tested
;post: ENDPTR contains first non-RAM memory address
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEMSIZ:	LDA	#<MEMBEG	;Load the starting address
	STA	ENDPLO
	LDA	#>MEMBEG
	STA	ENDPHI
	LDX	#00		;Use X as the zero source, and zero index

MEMSI1:	TXA			;Test by writing 0x00 first
	STA	(ENDPTR,X)	;Write it	
	LDA	(ENDPTR,X)	;Read it back
	BNE	MEMSI2		;Not 0x00, done

	CLC			;Now test with 0xFF
	SBC	#$00
	STA	(ENDPTR,X)	;Write it
	LDA	(ENDPTR,X)	;Read it back
	CMP	#$FF		;Compare it
	BNE	MEMSI2		;Not 0xFF, done

	INC	ENDPLO		;Increment low memory pointer
	BNE	MEMSI1		;No overflow, continue
	INC	ENDPHI		;Increment high memory pointer
	BNE	MEMSI1		;No overflow, continue

MEMSI2:	RTS			;We also end up here if we somehow have RAM
				;all the way to 0xFFFF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INMPTR -- Increment memory pointer
;
;Increments the memory pointer and compares the new value to
;ENDPTR. Compare flags are set.
;
;post: MEMPTR 16-bit value incremented
;post: Z flag set if MEMPTR == ENDPTR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
INMPTR:	INC	MEMPTR		;Increment the low byte
	BNE	INMPT1		;Didn't overflow, skip incrementing high byte
	INC	MEMPTR+1	;Increment the high byte

INMPT1:	LDA	MEMPTR+1	;Compare the high byte
	CMP	ENDPTR+1
	BNE	INMPT2		;Return with Z flag clear if different
	LDA	MEMPTR		;Compare the low byte
	CMP	ENDPTR

INMPT2:	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;RESTRT -- Restore start
;
;Move the VAR2,VAR3 pair into MEMPTR,MEMPTR+1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RESTRT:	LDA	VAR2
	STA	MEMPTR
	LDA	VAR3
	STA	MEMPTR+1
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;GTSVAL -- Get test value
;
;Calculates a byte that is derived from the current memory 
;address and pass count and return it in A.
;
;A = (MEMPTR ^ MEMPTR+1) ^ PASS_COUNT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GTSVAL:	LDA	MEMPTR
	EOR	MEMPTR+1
	STA	VAR1
	TXA
	EOR	VAR1
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;BYTOUT -- Display a byte on the AIM-65 display
;
;Outputs the ASCII hex representation of the byte in A on
;the AIM-65 display. High nybble is displayed at the
;position in X, low nybble at X+1.
;
;pre: A register contains byte to display
;pre: X register contains display position to start at
;post: ASCII hex representation of byte in A displayed
;post: A register contains original byte
;post: X = X+2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BYTOUT:	PHA			;Store byte to display
	PHA			;Again
	LSR	A		;Shift high nybble to low nybble
	LSR	A
	LSR	A
	LSR	A
	JSR	NYBOUT		;Display high nybble
	PLA			;Restore A
	JSR	NYBOUT		;Display low nybble
	PLA			;Restore A
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;NYBOUT -- Display a nybble on the AIM-65 display
;
;Outputs the hex nybble in the lower 4 bits of A as a
;single ASCII character.
;
;pre: A register contains nybble to print
;post: Low nybble of A displayed on AIM-65 display
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NYBOUT:	AND	#$0F
	ORA	#$30		;0-9 ASCII bias

	CMP	#':'		;Greater than '9'?
	BMI	NYBGUD		;Nope, output the character
	CMP	#'G'		;Greater than 'G'?
	BCS	NYBBAD		;Yes, skip outputting the character

	CLC			;A-F ASCII bias
	ADC #$07

NYBGUD:	JMP COUT		;Echo the character, and save an RTS by using a jmp.
NYBBAD:	RTS			;Nybble is not valid

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;COUT -- Character Out
;
;Write the character in A to the AIM-65 display.
;
;pre: A register contains character to print
;pre: X register contains next empty character position
;post: character printed to AIM-65 display
;post X register contains next empty character position 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COUT:	JSR	SCHAR		;Display A at X
	INX			;Point to next empty character
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;DISCLR -- Display Clear
;
;Clear the display by writing all spaces to it.
;
;post: AIM-65 display is cleared
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISCLR:	LDA	#' '		;Display is ASCII, literal space
	LDX	#19		;Clear all 20 characters
DISCLP:	JSR	SCHAR		;Store space char at X position
	DEX
	CPX	#$FF		;Have we underflowed count?
	BNE	DISCLP		;No, send more spaces

	RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PRINT -- Print a string
;
;Prints a string pointed to by MEMPTR to the display.
;
;pre: MEMPTR points to a fixed length string
;post: string is printed to AIM-65 display
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRINT:	PHA			;Preserve A
	TXA			;Preserve X
	PHA
	TYA			;Preserve Y
	PHA

	LDX	#$00
	LDY	#$00
PRINT1:	LDA	(MEMPTR),Y
	JSR	COUT
	INY
	CPX	#20		;Have we printed 20 chars yet?
	BNE	PRINT1		;No, print more

	PLA			;Restore Y
	TAY
	PLA			;Restore X
	TAX
	PLA			;Restore A
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;DELAY -- Delay for a bit
;
;Imprecise software delay routine.
;
;post: A register contains Y register
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DELAY:	TXA			;Save X on stack
	PHA
	TYA			;Save Y on stack
	PHA

	LDX	#$FF
DLOOP1:	LDY	#$FF

DLOOP2:	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	DEY
	BNE	DLOOP2
	DEX
	BNE	DLOOP1

	PLA
	TAY			;Restore Y from stack
	PLA
	TAX			;Restore X from stack

	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SCHAR -- Set character
;
;Sets the display character at X to the character in A.
;
;pre: A register contains character to display
;pre: X register contains position to display character at
;post: character displayed on AIM-65 display
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SCHAR:	PHA			;Preserve A

	ORA	#CHARMOD	;Disable cursor mode
	STA	PIAORB		;Character on data lines

	LDA	DISPCE,X	;Get the display chip select+character
				;select bit pattern
	STA	PIAORA		;Output the character address, select
				;the display, and keep ~W high

	AND	#DISPWR		;Toggle *W low to write displays
	STA	PIAORA
	ORA	#NDISPWR	;Toggle *W high to disable writing
	STA	PIAORA

	LDA	#DCEIDLE	;Reset display select bits to idle
	STA	PIAORA
	LDA	#CHARMOD	;Reset data bits to idle
	STA	PIAORB

	PLA			;Restore A
	RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;String Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RMFAIL:	.byte "ROM CHECKSUM FAILURE"
RMGOOD: .byte "ROM CHECKSUM PASSED "
ZPTEST:	.byte "TESTING ZERO-PAGE   "
ZPGOOD:	.byte "ZERO-PAGE PASSED    "
ZPFAIL:	.byte "ZERO-PAGE FAILURE   "
STTEST: .byte "TESTING STACK PAGE  "
STGOOD: .byte "STACK PAGE PASSED   "
STFAIL:	.byte "STACK PAGE FAILURE  "
RIOTFL: .byte "RIOT RAM FAILURE    "
RIOTGD: .byte "RIOT RAM PASSED     "
MEMERR: .byte "ERROR@0000 E=00 R=00"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;DISPCE -- Table to decode display CE lines
;
;This table decodes chip select (CE) lines for the AIM-65's
;alphanumeric displays. These displays are addressed and
;controlled through PIA ports, rather than being directly on
;the 6502 system bus.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPCE:	.byte %11111011, %11111010, %11111001, %11111000
	.byte %11110111, %11110110, %11110101, %11110100
	.byte %11101111, %11101110, %11101101, %11101100
	.byte %11011111, %11011110, %11011101, %11011100
	.byte %10111111, %10111110, %10111101, %10111100

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SUMVAL and SUMBYT -- Checksum byte
;
;This checksum byte must be set such that the entire ROM
;checksums to 0x00. The ROM checksum test will fail
;otherwise, and further tests will not run.
;
;Normally, SUMVAL is calculated and updated using a Perl
;script called from the Makefile.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SUMVAL	=	$6B
SUMBYT:	.byte SUMVAL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;VECTORS -- Reset, NMI, and INT vectors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.segment "VECTORS"
.word	START
.word	START
.word	START